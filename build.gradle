plugins {
	id "maven-publish"
	id "com.github.node-gradle.node" version "3.5.1"
	id "com.enonic.xp.app" version "3.2.0"
}

ext {
	nodeVer = "18.12.0"
}

app {
	name = "${appName}"
	displayName = "${appDisplayName}"
	vendorName = "${vendorName}"
	vendorUrl = "${vendorUrl}"
	systemVersion = "${xpVersion}"

	allowDevSourcePathsPublishing = true // for setting com.enonic.xp.app.production = true
}

node {
	version = nodeVer
	download = true
}

repositories {
	mavenLocal()
	mavenCentral()
	xp.enonicRepo()
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId "no.tine.xp"
			artifactId "$projectName"
			version  System.getenv("BUILD_BUILDNUMBER")
			from components.java
		}
	}

	repositories {
		maven {
			url 'https://pkgs.dev.azure.com/tine-sa/_packaging/digitale-flater/maven/v1'
			name 'digitale-flater'
			authentication {
				basic(BasicAuthentication)
			}

			def azureCredentials = readSettings(name)
			credentials {
				username = azureCredentials?.username
				password = azureCredentials?.password
			}
		}
	}
}

def readSettings(repoName) {
	println "Looking for settings for repo " + repoName

	def userHome = System.getProperty("user.home")
	def mavenSettingsFile = new File(userHome, ".m2/settings.xml")

	def settings = new XmlSlurper().parse(mavenSettingsFile)
	def matchingSettings = settings.servers.server.find{ it.id.text() == repoName }

	return [ username: matchingSettings.username, password: matchingSettings.password ];
}

dependencies {
	compile "com.enonic.xp:core-api:${xpVersion}"
	compile "com.enonic.xp:portal-api:${xpVersion}"
	include "com.enonic.xp:lib-portal:${xpVersion}"
	include "com.enonic.xp:lib-content:${xpVersion}"
}

task transpile(type: NpmTask, dependsOn: 'npmInstall') {
	group = 'build'
	description = 'Execute transpile for production.'
	args = ['run', 'build']
}

processResources.dependsOn('transpile')
